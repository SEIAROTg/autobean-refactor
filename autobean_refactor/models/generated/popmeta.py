# DO NOT EDIT
# This file is automatically generated by autobean_refactor.modelgen.

from typing import Type, TypeVar, final
from .. import base
from .. import internal
from ..meta_key import MetaKey
from ..punctuation import Whitespace

_Self = TypeVar('_Self', bound='Popmeta')


@internal.token_model
class PopmetaLabel(internal.SimpleDefaultRawTokenModel):
    RULE = 'POPMETA'
    DEFAULT = 'popmeta'


@internal.tree_model
class Popmeta(base.RawTreeModel):
    RULE = 'popmeta'

    _label = internal.required_field[PopmetaLabel]()
    _key = internal.required_field[MetaKey]()

    raw_key = internal.required_node_property(_key)

    key = internal.required_string_property(raw_key)

    @final
    def __init__(
            self,
            token_store: base.TokenStore,
            label: PopmetaLabel,
            key: MetaKey,
    ):
        super().__init__(token_store)
        self._label = label
        self._key = key

    @property
    def first_token(self) -> base.RawTokenModel:
        return self._label.first_token

    @property
    def last_token(self) -> base.RawTokenModel:
        return self._key.last_token

    def clone(self: _Self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> _Self:
        return type(self)(
            token_store,
            self._label.clone(token_store, token_transformer),
            self._key.clone(token_store, token_transformer),
        )
    
    def _reattach(self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> None:
        self._token_store = token_store
        self._label = self._label.reattach(token_store, token_transformer)
        self._key = self._key.reattach(token_store, token_transformer)

    def _eq(self, other: base.RawTreeModel) -> bool:
        return (
            isinstance(other, Popmeta)
            and self._label == other._label
            and self._key == other._key
        )

    @classmethod
    def from_children(
            cls: Type[_Self],
            key: MetaKey,
    ) -> _Self:
        label = PopmetaLabel.from_default()
        tokens = [
            *label.detach(),
            Whitespace.from_default(),
            *key.detach(),
        ]
        token_store = base.TokenStore.from_tokens(tokens)
        label.reattach(token_store)
        key.reattach(token_store)
        return cls(token_store, label, key)
