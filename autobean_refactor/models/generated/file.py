# DO NOT EDIT
# This file is automatically generated by autobean_refactor.modelgen.

from typing import Iterable, Type, TypeVar, final
from .. import base, internal
from ..balance import Balance
from ..close import Close
from ..commodity import Commodity
from ..custom import Custom
from ..document import Document
from ..event import Event
from ..include import Include
from ..note import Note
from ..open import Open
from ..option import Option
from ..pad import Pad
from ..plugin import Plugin
from ..popmeta import Popmeta
from ..poptag import Poptag
from ..price import Price
from ..punctuation import Newline
from ..pushmeta import Pushmeta
from ..pushtag import Pushtag
from ..query import Query
from ..transaction import Transaction

Directive = Balance | Close | Commodity | Custom | Document | Event | Include | Note | Open | Option | Pad | Plugin | Popmeta | Poptag | Price | Pushmeta | Pushtag | Query | Transaction
_Self = TypeVar('_Self', bound='File')


@internal.tree_model
class File(base.RawTreeModel):
    RULE = 'file'

    _directives = internal.repeated_field[Directive](separators=(Newline.from_default(),), separators_before=())

    raw_directives = internal.repeated_node_property(_directives)

    directives = raw_directives

    @final
    def __init__(
            self,
            token_store: base.TokenStore,
            directives: internal.Repeated[Directive],
    ):
        super().__init__(token_store)
        self._directives = directives

    @property
    def first_token(self) -> base.RawTokenModel:
        return self._directives.first_token

    @property
    def last_token(self) -> base.RawTokenModel:
        return self._directives.last_token

    def clone(self: _Self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> _Self:
        return type(self)(
            token_store,
            self._directives.clone(token_store, token_transformer),
        )

    def _reattach(self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> None:
        self._token_store = token_store
        self._directives = self._directives.reattach(token_store, token_transformer)

    def _eq(self, other: base.RawTreeModel) -> bool:
        return (
            isinstance(other, File)
            and self._directives == other._directives
        )

    @classmethod
    def from_children(
            cls: Type[_Self],
            directives: Iterable[Directive],
    ) -> _Self:
        repeated_directives = internal.Repeated[Directive].from_children(directives, separators=cls._directives.separators, separators_before=cls._directives.separators_before)
        tokens = [
            *repeated_directives.detach(),
        ]
        token_store = base.TokenStore.from_tokens(tokens)
        repeated_directives.reattach(token_store)
        return cls(token_store, repeated_directives)

    @classmethod
    def from_value(
            cls: Type[_Self],
            directives: Iterable[Directive],
    ) -> _Self:
        return cls.from_children(
            directives,
        )
