# DO NOT EDIT
# This file is automatically generated by autobean_refactor.modelgen.

from typing import Iterable, Type, TypeVar, final
from .. import base
from .. import internal
from ..account import Account
from ..amount import Amount
from ..bool import Bool
from ..date import Date
from ..escaped_string import EscapedString
from ..number_expr import NumberExpr
from ..punctuation import Whitespace

CustomRawValue = Account | Amount | Bool | Date | EscapedString | NumberExpr
_Self = TypeVar('_Self', bound='Custom')


@internal.token_model
class CustomLabel(internal.SimpleDefaultRawTokenModel):
    RULE = 'CUSTOM'
    DEFAULT = 'custom'


@internal.tree_model
class Custom(base.RawTreeModel):
    RULE = 'custom'

    _date = internal.required_field[Date]()
    _label = internal.required_field[CustomLabel]()
    _type = internal.required_field[EscapedString]()
    _values = internal.repeated_field[CustomRawValue](separators=(Whitespace.from_default(),))

    raw_date = internal.required_node_property(_date)
    raw_type = internal.required_node_property(_type)
    raw_values = internal.repeated_node_property(_values)

    @final
    def __init__(
            self,
            token_store: base.TokenStore,
            date: Date,
            label: CustomLabel,
            type: EscapedString,
            values: internal.Repeated[CustomRawValue],
    ):
        super().__init__(token_store)
        self._date = date
        self._label = label
        self._type = type
        self._values = values

    @property
    def first_token(self) -> base.RawTokenModel:
        return self._date.first_token

    @property
    def last_token(self) -> base.RawTokenModel:
        return self._values.last_token

    def clone(self: _Self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> _Self:
        return type(self)(
            token_store,
            self._date.clone(token_store, token_transformer),
            self._label.clone(token_store, token_transformer),
            self._type.clone(token_store, token_transformer),
            self._values.clone(token_store, token_transformer),
        )
    
    def _reattach(self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> None:
        self._token_store = token_store
        self._date = self._date.reattach(token_store, token_transformer)
        self._label = self._label.reattach(token_store, token_transformer)
        self._type = self._type.reattach(token_store, token_transformer)
        self._values = self._values.reattach(token_store, token_transformer)

    def _eq(self, other: base.RawTreeModel) -> bool:
        return (
            isinstance(other, Custom)
            and self._date == other._date
            and self._label == other._label
            and self._type == other._type
            and self._values == other._values
        )

    @classmethod
    def from_children(
            cls: Type[_Self],
            date: Date,
            type: EscapedString,
            values: Iterable[CustomRawValue],
    ) -> _Self:
        label = CustomLabel.from_default()
        repeated_values = internal.Repeated[CustomRawValue].from_children(values, separators=cls._values.separators)
        tokens = [
            *date.detach(),
            Whitespace.from_default(),
            *label.detach(),
            Whitespace.from_default(),
            *type.detach(),
            *repeated_values.detach(),
        ]
        token_store = base.TokenStore.from_tokens(tokens)
        date.reattach(token_store)
        label.reattach(token_store)
        type.reattach(token_store)
        repeated_values.reattach(token_store)
        return cls(token_store, date, label, type, repeated_values)
