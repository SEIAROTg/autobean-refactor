<%
import collections
import itertools
import stringcase
from autobean_refactor.modelgen.field_descriptor import FieldCardinality
from autobean_refactor.meta_models.base import Floating


def fmt_separators(separators: tuple[str, ...]) -> str:
    if len(separators) == 1:
        inner = separators[0] + ','
    else:
        inner = ', '.join(separators)
    return '(' + inner + ')'


imports = set()
typing_imports = {'TypeVar', 'Type', 'final'}
for field in fields:
    if field.cardinality == FieldCardinality.OPTIONAL:
        typing_imports.add('Optional')
    elif field.cardinality == FieldCardinality.REPEATED:
        typing_imports.add('Iterable')
model_imports = collections.defaultdict(set)
model_imports_type_check_only = collections.defaultdict(set)
model_imports['punctuation'].add('Whitespace')
for field in fields:
    if field.define_as: continue
    for model_type in field.model_types:
        if field.has_circular_dep:
            model_imports_type_check_only[model_type.module].add(model_type.name)
            typing_imports.add('TYPE_CHECKING')
        else:
            model_imports[model_type.module].add(model_type.name)
    if len(field.model_types) == 1:
        *module, _ = model_type.value_type.rsplit('.', 1)
        if module:
            imports.add(module[0])

    for sep in itertools.chain(field.separators or (), field.separators_before or ()):
        if sep.startswith('Comma.'):
            model_imports['punctuation'].add('Comma')
%>\
# DO NOT EDIT
# This file is automatically generated by autobean_refactor.modelgen.

% for module in sorted(imports):
import ${module}
% endfor
from typing import ${', '.join(sorted(typing_imports))}
from .. import base
from .. import internal
% for name, imports in sorted(model_imports.items()):
from ..${name} import ${', '.join(sorted(imports))}
% endfor
% if model_imports_type_check_only:
if TYPE_CHECKING:
% for name, imports in sorted(model_imports_type_check_only.items()):
  from ..${name} import ${', '.join(sorted(imports))}
% endfor
% endif

% for field in fields:
% if field.type_alias is not None:
${field.type_alias} = ${field.inner_type_original}
% endif
% endfor
_Self = TypeVar('_Self', bound='${model_name}')
% for field in fields:
% if field.define_as:


@internal.token_model
% if field.define_default is not None:
class ${field.define_as}(internal.SimpleDefaultRawTokenModel):
    RULE = '${next(iter(field.model_types)).rule}'
    DEFAULT = '${field.define_default}'
% else:
class ${field.define_as}(internal.SimpleRawTokenModel):
    RULE = '${next(iter(field.model_types)).rule}'
% endif
% endif
% endfor


@internal.tree_model
class ${model_name}(base.RawTreeModel):
    RULE = '${stringcase.snakecase(model_name)}'

% for field in fields:
% if field.cardinality == FieldCardinality.REQUIRED:
    _${field.name} = internal.required_field[${field.inner_type}]()
% elif field.cardinality == FieldCardinality.OPTIONAL:
    _${field.name} = internal.optional_field[${field.inner_type}](separators=${fmt_separators(field.separators)})
% elif field.cardinality == FieldCardinality.REPEATED:
<%
opt_separators_before = f', separators_before={fmt_separators(field.separators_before)}' if field.separators_before is not None else ''
%>\
    _${field.name} = internal.repeated_field[${field.inner_type}](separators=${fmt_separators(field.separators)}${opt_separators_before})
% else:
<% assert False %>\
% endif
% endfor

% for field in fields:
<% if not field.is_public: continue %>\
% if field.cardinality == FieldCardinality.REQUIRED:
    raw_${field.name} = internal.required_node_property(_${field.name})
% elif field.cardinality == FieldCardinality.OPTIONAL:
    raw_${field.name} = internal.optional_node_property(_${field.name})
% elif field.cardinality == FieldCardinality.REPEATED:
    raw_${field.name} = internal.repeated_node_property(_${field.name})
% else:
<% assert False %>\
% endif
% endfor

<% any_value_property = False %>\
% for field in fields:
% if field.value_property_def is not None:
    ${field.name} = ${field.value_property_def}
<% any_value_property = True %>\
% endif
% endfor
% if any_value_property:

% endif
    @final
    def __init__(
            self,
            token_store: base.TokenStore,
% for field in fields:
            ${field.name}: ${field.internal_type},
% endfor
    ):
        super().__init__(token_store)
% for field in fields:
        self._${field.name} = ${field.name}
% endfor

    @property
    def first_token(self) -> base.RawTokenModel:
        return self._${fields[0].name}.first_token

    @property
    def last_token(self) -> base.RawTokenModel:
        return self._${fields[-1].name}.last_token

    def clone(self: _Self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> _Self:
        return type(self)(
            token_store,
% for field in fields:
            self._${field.name}.clone(token_store, token_transformer),
% endfor
        )
    
    def _reattach(self, token_store: base.TokenStore, token_transformer: base.TokenTransformer) -> None:
        self._token_store = token_store
% for field in fields:
        self._${field.name} = self._${field.name}.reattach(token_store, token_transformer)
% endfor

    def _eq(self, other: base.RawTreeModel) -> bool:
        return (
            isinstance(other, ${model_name})
% for field in fields:
            and self._${field.name} == other._${field.name}
% endfor
        )

<% all_value_property = True %>\
    @classmethod
    def from_children(
            cls: Type[_Self],
% for field in fields:
<% if not field.is_public: continue %>\
<% if field.value_property_def is None: all_value_property = False %>\
% if not field.is_optional:
            ${field.name}: ${field.input_type},
% elif field.cardinality == FieldCardinality.OPTIONAL:
            ${field.name}: ${field.input_type} = None,
% elif field.cardinality == FieldCardinality.REPEATED:
            ${field.name}: ${field.input_type} = (),
% else:
<% assert False %>\
% endif
% endfor
    ) -> _Self:
% for field in fields:
<%
# mypy isn't good at inferring union type
type_fix = f'[{field.type_alias}]' if field.type_alias is not None else ''
%>\
% if not field.is_public:
        ${field.name} = ${field.inner_type}.from_default()
% elif field.cardinality == FieldCardinality.OPTIONAL:
        maybe_${field.name} = internal.Maybe${field.floating.name[0]}${type_fix}.from_children(${field.name}, separators=cls._${field.name}.separators)
% elif field.cardinality == FieldCardinality.REPEATED:
<%
opt_separators_before = f', separators_before=cls._{field.name}.separators_before' if field.separators_before is not None else ''
%>\
        repeated_${field.name} = internal.Repeated${type_fix}.from_children(${field.name}, separators=cls._${field.name}.separators${opt_separators_before})
% endif
% endfor
<%
skip_space = True
args = []
%>\
        tokens = [
% for field in fields:
% if not skip_space and field.floating != Floating.LEFT:
            Whitespace.from_default(),
% endif
<% skip_space = False %>\
% if field.cardinality == FieldCardinality.REQUIRED:
            *${field.name}.detach(),
<%
args.append(field.name)
%>\
% elif field.cardinality == FieldCardinality.OPTIONAL:
            *maybe_${field.name}.detach(),
<%
skip_space = field.floating == Floating.RIGHT
args.append(f'maybe_{field.name}')
%>\
% elif field.cardinality == FieldCardinality.REPEATED:
            *repeated_${field.name}.detach(),
<%
args.append(f'repeated_{field.name}')
%>\
% else:
<% assert False %>\
% endif
% endfor
        ]
        token_store = base.TokenStore.from_tokens(tokens)
% for arg in args:
        ${arg}.reattach(token_store)
% endfor
        return cls(token_store, ${', '.join(args)})
% if all_value_property:

    @classmethod
    def from_value(
            cls: Type[_Self],
% for field in fields:
<% if not field.is_public: continue %>\
% if field.cardinality == FieldCardinality.REQUIRED:
            ${field.name}: ${field.value_type},
% elif field.cardinality == FieldCardinality.OPTIONAL:
            ${field.name}: Optional[${field.value_type}],
% elif field.cardinality == FieldCardinality.REPEATED:
            ${field.name}: Iterable[${field.value_type}],
% endif
% endfor
    ) -> _Self:
        return cls.from_children(
% for field in fields:
<% if not field.is_public: continue %>\
% if field.value_type == field.inner_type:
            ${field.name},
% elif field.cardinality == FieldCardinality.REQUIRED:
            ${field.inner_type_original}.from_value(${field.name}),
% elif field.cardinality == FieldCardinality.OPTIONAL:
            ${field.inner_type_original}.from_value(${field.name}) if ${field.name} is not None else None,
% elif field.cardinality == FieldCardinality.REPEATED:
            map(${field.inner_type_original}.from_value, ${field.name}),
% endif
% endfor
        )
% endif
